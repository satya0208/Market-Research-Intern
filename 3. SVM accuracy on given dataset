#!/usr/bin/env python
# coding: utf-8

# In[1]:


#importing libraries

import numpy as np  # for handling multi-dimensional array operation
import pandas as pd  # for reading data from csv 
import statsmodels.api as sm  # for finding the p-value
from sklearn.preprocessing import MinMaxScaler  # for normalization
from sklearn.model_selection import train_test_split as tts
from sklearn.metrics import accuracy_score 
from sklearn.utils import shuffle
import matplotlib.pyplot as plt  
from sklearn.linear_model import LogisticRegression 
from sklearn.svm import SVC  
from sklearn.manifold import TSNE 
import matplotlib.pyplot as plt 
import seaborn as sns 
from keras.layers import Input, Dense 
from keras.models import Model, Sequential 
from keras import regularizers 
from sklearn import svm, datasets
get_ipython().run_line_magic('matplotlib', 'inline')


# In[2]:


#reading data of epileptic sheet
df1=pd.read_csv('epilepsy_sheet1.csv')
print(df1.shape)
df1.head()


# In[3]:


#transpose of df1
result1=df1.transpose()
result1.head()


# In[4]:


result1['Class Label']='Epileptic'
result1.head()


# In[5]:


#Reading second sheet of healthy patients
df2=pd.read_csv('epilepsy_sheet2.csv')
print(df2.shape)
df2.head()


# In[6]:


#transpose of df2
result2=df2.transpose()
result2.head()


# In[7]:


#adding class label
result2['Class Label']='Healthy'
result2.head()


# In[8]:


frame=[result1,result2]
new=pd.concat(frame)
new.head()


# In[9]:


new


# In[10]:


#Splitting the dataset into training and test samples

from sklearn.model_selection import train_test_split
training_set, test_set = train_test_split(new, test_size = 0.2, random_state = 1)


# In[11]:


#Classifying the predictors and target

X_train = training_set.iloc[:,0:4097].values
Y_train = training_set.iloc[:,4097].values
X_test = test_set.iloc[:,0:4097].values
Y_test = test_set.iloc[:,4097].values


# # Initializing Support Vector Machine and fitting the training data
# 

# In[12]:


# LINEAR KERNEL

from sklearn.svm import SVC
classifier = SVC(kernel='linear', random_state = 1)
classifier.fit(X_train,Y_train)


# In[13]:


#Predicting the classes for test set

Y_pred = classifier.predict(X_test)


# In[14]:


#Attaching the predictions to test set for comparing

test_set["Predictions"] = Y_pred


# In[15]:


# Calculating the accuracy of the predictions

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
accuracy = float(cm.diagonal().sum())/len(Y_test)
print("\nAccuracy Of SVM(Linear Kernel) For The Given Dataset : ", accuracy*100)


# In[16]:


from sklearn.svm import SVC
classifier = SVC(kernel='linear', random_state = 1, C=1.0)
classifier.fit(X_train,Y_train)


# In[17]:


#Predicting the classes for test set

Y_pred = classifier.predict(X_test)


# In[18]:


#Attaching the predictions to test set for comparing

test_set["Predictions"] = Y_pred


# In[19]:


# Calculating the accuracy of the predictions

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
accuracy = float(cm.diagonal().sum())/len(Y_test)
print("\nAccuracy Of SVM(Linear Kernel with C=0.1) For The Given Dataset : ", accuracy*100)


# In[76]:


#Initializing Support Vector Machine and fitting the training data
#RBF KERNEL

from sklearn.svm import SVC
classifier = SVC(kernel='rbf', random_state = 1, gamma=100000000000000000000000000000000000000000000000000000000000000.0)
classifier.fit(X_train,Y_train)


# In[77]:


#Predicting the classes for test set

Y_pred = classifier.predict(X_test)


# In[78]:


#Attaching the predictions to test set for comparing

test_set["Predictions"] = Y_pred


# In[79]:


#Calculating the accuracy of the predictions

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
accuracy = float(cm.diagonal().sum())/len(Y_test)
print("\nAccuracy Of SVM(RBF Kernel) For The Given Dataset : ", accuracy*100)


# In[24]:


#Initializing Support Vector Machine and fitting the training data
#SIGMOID KERNEL

from sklearn.svm import SVC
classifier = SVC(kernel='sigmoid', random_state = 1)
classifier.fit(X_train,Y_train)


# In[25]:


#Predicting the classes for test set

Y_pred = classifier.predict(X_test)


# In[26]:


#Attaching the predictions to test set for comparing

test_set["Predictions"] = Y_pred


# In[27]:


#Calculating the accuracy of the predictions

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
accuracy = float(cm.diagonal().sum())/len(Y_test)
print("\nAccuracy Of SVM(Sigmoid Kernel) For The Given Dataset : ", accuracy*100)


# In[28]:


#Initializing Support Vector Machine and fitting the training data
#POLYNOMIAL KERNEL

from sklearn.svm import SVC
classifier = SVC(kernel='poly', random_state = 1)
classifier.fit(X_train,Y_train)


# In[29]:


#Predicting the classes for test set

Y_pred = classifier.predict(X_test)


# In[30]:


#Attaching the predictions to test set for comparing

test_set["Predictions"] = Y_pred


# In[31]:


#Calculating the accuracy of the predictions

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test,Y_pred)
accuracy = float(cm.diagonal().sum())/len(Y_test)
print("\nAccuracy Of SVM(Polynomial Kernel) For The Given Dataset : ", accuracy*100)


# In[ ]:





# In[ ]:





# In[ ]:




